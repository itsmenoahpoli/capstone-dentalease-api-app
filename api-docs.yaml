openapi: 3.0.3
info:
  title: DentalEase API
  description: API for DentalEase application - managing dental services and user authentication
  version: 1.0.0
  contact:
    name: DentalEase Team
    email: support@dentalease.com

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://api.dentalease.com/api/v1
    description: Production server

paths:
  /auth/signin:
    post:
      tags:
        - Authentication
      summary: User sign in
      description: Authenticate user with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: "password123"
      responses:
        "200":
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
                  session:
                    type: string
                  token:
                    type: string
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/signout:
    post:
      tags:
        - Authentication
      summary: User sign out
      description: Sign out user and invalidate session
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session_id
              properties:
                session_id:
                  type: string
                  example: "session_123456"
      responses:
        "200":
          description: Successfully signed out
          content:
            application/json:
              schema:
                type: boolean
                example: true
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/request-otp:
    post:
      tags:
        - Authentication
      summary: Request OTP
      description: Request one-time password for email verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - type
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                type:
                  type: string
                  enum: [signup, reset_password]
                  example: signup
      responses:
        "200":
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP sent successfully"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/verify-otp:
    post:
      tags:
        - Authentication
      summary: Verify OTP
      description: Verify one-time password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                otp:
                  type: string
                  minLength: 6
                  maxLength: 6
                  example: "123456"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: boolean
                example: true
        "400":
          description: Invalid OTP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /services:
    get:
      tags:
        - Services
      summary: Get all services
      description: Retrieve a list of all dental services
      responses:
        "200":
          description: List of services
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Service"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Services
      summary: Create a new service
      description: Create a new dental service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - category
                - name
                - price
                - status
              properties:
                category:
                  type: string
                  maxLength: 255
                  example: "Dental Cleaning"
                name:
                  type: string
                  maxLength: 255
                  example: "Regular Cleaning"
                price:
                  type: number
                  minimum: 0
                  example: 150.00
                status:
                  type: string
                  enum: [offered, draft]
                  example: "offered"
      responses:
        "201":
          description: Service created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Service"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /services/{id}:
    get:
      tags:
        - Services
      summary: Get a specific service
      description: Retrieve a specific dental service by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
      responses:
        "200":
          description: Service details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Service"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Services
      summary: Update a service
      description: Update an existing dental service
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  maxLength: 255
                  example: "Dental Cleaning"
                name:
                  type: string
                  maxLength: 255
                  example: "Premium Cleaning"
                price:
                  type: number
                  minimum: 0
                  example: 200.00
                status:
                  type: string
                  enum: [offered, draft]
                  example: "offered"
      responses:
        "200":
          description: Service updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Service"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Services
      summary: Delete a service
      description: Delete a dental service
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
      responses:
        "200":
          description: Service deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Service deleted successfully"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Service:
      type: object
      properties:
        id:
          type: integer
          example: 1
        category:
          type: string
          example: "Dental Cleaning"
        name:
          type: string
          example: "Regular Cleaning"
        price:
          type: string
          format: decimal
          example: "150.00"
        status:
          type: string
          enum: [offered, draft]
          example: "offered"
        created_at:
          type: string
          format: date-time
          example: "2025-07-31T09:10:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-07-31T09:10:00.000000Z"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Error message"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            field_name:
              - "The field_name field is required."

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Services
    description: Dental services management
